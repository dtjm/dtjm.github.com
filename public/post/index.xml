<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Post-rsses on Sam X.</title>
    <link>https://dl.dropboxusercontent.com/u/222781/dtjm.github.io/public/post/index.xml</link>
    <description>Recent content in Post-rsses on Sam X.</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 06 Nov 2016 21:51:21 -0800</lastBuildDate>
    <atom:link href="https://dl.dropboxusercontent.com/u/222781/dtjm.github.io/public/post/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Designing libraries in Go</title>
      <link>https://dl.dropboxusercontent.com/u/222781/dtjm.github.io/public/post/designing-go-libraries/</link>
      <pubDate>Sun, 06 Nov 2016 21:51:21 -0800</pubDate>
      
      <guid>https://dl.dropboxusercontent.com/u/222781/dtjm.github.io/public/post/designing-go-libraries/</guid>
      <description>

&lt;p&gt;I am by far an expert in Go, but in the past few years I&amp;rsquo;ve collected some ideas
of what makes a Go library easy to use. Here are a few humble suggestions I have
for you, the Go library designer, which can bring joy and delight to your users.&lt;/p&gt;

&lt;h2 id=&#34;minimize-interfaces-you-accept&#34;&gt;Minimize interfaces you accept&lt;/h2&gt;

&lt;p&gt;Sometimes you want to define the interface of something that gets passed into
your library, for example a logger.&lt;/p&gt;

&lt;p&gt;So you think to yourself, &amp;ldquo;I&amp;rsquo;m such a nice guy, I&amp;rsquo;m going to let my user&amp;rdquo; pass
in any logger of their choosing:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;type Logger interface {
	Fatal(args ...interface{})
	Fatalf(format string, args ...interface{})
	Fatalln(args ...interface{})
	Print(args ...interface{})
	Printf(format string, args ...interface{})
	Println(args ...interface{})
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Great! But, at the same time, not so great. You&amp;rsquo;ve destined your user to either use
the standard library [log] package, or write an adapter which has 6 methods.&lt;/p&gt;

&lt;p&gt;There is a better way. First of all, notice that some of these methods can be
expressed in terms of the others. In other words, why write &lt;code&gt;Println&lt;/code&gt; when you
already have &lt;code&gt;Printf&lt;/code&gt;? One is expressable in terms of the other.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;func Println(s string) {
	Printf(&amp;quot;%s\n&amp;quot;, s)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This gives us the opportunity to minimize the interface we require:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;type Logger interface {
	Fatalf(format string, args ...interface{})
	Printf(format string, args ...interface{})
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That&amp;rsquo;s a little better, right?&lt;/p&gt;

&lt;p&gt;Don&amp;rsquo;t do &lt;a href=&#34;https://github.com/Shopify/sarama/blob/482c471fbf73dc2ac66945187f811581f008c24a/sarama.go#L61-L65&#34;&gt;this&lt;/a&gt;, &lt;a href=&#34;https://github.com/Shopify/sarama/blob/master/mockresponses.go#L9-L14&#34;&gt;that&lt;/a&gt;, or especially not &lt;a href=&#34;https://github.com/grpc/grpc-go/blob/master/grpclog/logger.go#L50-L57&#34;&gt;this&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;2a-take-a-logger-as-a-function&#34;&gt;2a. Take a logger as a function&lt;/h2&gt;

&lt;p&gt;If you can reduce your&lt;/p&gt;

&lt;h2 id=&#34;1-expose-interfaces-not-structs&#34;&gt;1. Expose interfaces, not structs&lt;/h2&gt;

&lt;h2 id=&#34;3-don-t-put-state-in-the-package&#34;&gt;3. Don&amp;rsquo;t put state in the package&lt;/h2&gt;

&lt;h2 id=&#34;4-embed-your-dependencies&#34;&gt;4. Embed your dependencies&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-golang&#34;&gt;// here is some code
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>